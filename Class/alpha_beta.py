'''
    *** Chi·∫øn l∆∞·ª£c C·∫Øt T·ªâa Alpha-Beta (Alpha-Beta Pruning) ***
    C·∫Øt t·ªâa Alpha-Beta l√† m·ªôt k·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a ƒë∆∞·ª£c s·ª≠ d·ª•ng trong thu·∫≠t to√°n Minimax ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng n√∫t c·∫ßn duy·ªát trong 
    c√¢y t√¨m ki·∫øm. K·ªπ thu·∫≠t n√†y gi√∫p tƒÉng t·ªëc ƒë·ªô t√¨m ki·∫øm m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ cu·ªëi c√πng.

    *** M√¥ t·∫£ thu·∫≠t to√°n ***
        - Khi t√¨m ki·∫øm tr√™n c√¢y Minimax, ta c√≥ hai gi√° tr·ªã quan tr·ªçng t·∫°i m·ªói n√∫t:
            + Alpha (Œ±): Gi√° tr·ªã t·ªët nh·∫•t m√† ng∆∞·ªùi ch∆°i "Max" (ng∆∞·ªùi c·∫ßn t·ªëi ƒëa h√≥a ƒëi·ªÉm) c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c.
            + Beta (Œ≤): Gi√° tr·ªã t·ªët nh·∫•t m√† ng∆∞·ªùi ch∆°i "Min" (ng∆∞·ªùi c·∫ßn t·ªëi thi·ªÉu h√≥a ƒëi·ªÉm) c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c.

        - √ù t∆∞·ªüng ch√≠nh:
            + N·∫øu m·ªôt n√∫t con c√≥ gi√° tr·ªã t·ªìi h∆°n so v·ªõi m·ª©c t·ªët nh·∫•t m√† cha n√≥ c√≥ th·ªÉ ƒë·∫£m b·∫£o, ta c√≥ th·ªÉ b·ªè qua t·∫•t c·∫£ 
              c√°c n√∫t con c·ªßa n√≥ m√† kh√¥ng c·∫ßn x√©t ti·∫øp.
            + ƒêi·ªÅu n√†y gi√∫p gi·∫£m s·ªë n√∫t c·∫ßn x√©t, c·∫£i thi·ªán hi·ªáu su·∫•t ƒë√°ng k·ªÉ.

    *** C√°ch ho·∫°t ƒë·ªông ***
        1Ô∏è‚É£ Khi duy·ªát n√∫t Max
            - C·∫≠p nh·∫≠t Alpha (Œ±): N·∫øu t√¨m th·∫•y m·ªôt gi√° tr·ªã l·ªõn h∆°n Œ±, ta c·∫≠p nh·∫≠t Œ±.
            - C·∫Øt t·ªâa: N·∫øu ùõº ‚â• ùõΩ, ta d·ª´ng x√©t c√°c con c√≤n l·∫°i c·ªßa n√∫t ƒë√≥.
        2Ô∏è‚É£ Khi duy·ªát n√∫t Min
            - C·∫≠p nh·∫≠t Beta (Œ≤): N·∫øu t√¨m th·∫•y m·ªôt gi√° tr·ªã nh·ªè h∆°n Œ≤, ta c·∫≠p nh·∫≠t Œ≤.
            - C·∫Øt t·ªâa: N·∫øu ùõº ‚â• ùõΩ, ta d·ª´ng x√©t c√°c con c√≤n l·∫°i c·ªßa n√∫t ƒë√≥.
'''

import math

# H√†m ƒë√°nh gi√° gi√° tr·ªã c·ªßa m·ªôt tr·∫°ng th√°i (ƒë·ªëi v·ªõi c√°c n√∫t l√°)
def evaluate(state):
    return state  # Trong v√≠ d·ª• n√†y, tr·∫°ng th√°i l√† gi√° tr·ªã c·ªßa ch√≠nh n√∫t l√°

# Thu·∫≠t to√°n Minimax v·ªõi c·∫Øt t·ªâa Alpha-Beta
def alpha_beta_pruning(depth, node_index, is_maximizing, values, alpha, beta):
    # N·∫øu ƒë·∫°t ƒë·ªô s√¢u t·ªëi ƒëa, tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa n√∫t l√°
    if depth == 3:  
        return values[node_index]

    if is_maximizing:
        max_eval = -math.inf
        # M·ªói n√∫t c√≥ 2 con, x√©t l·∫ßn l∆∞·ª£t
        for i in range(2):
            eval_value = alpha_beta_pruning(depth + 1, node_index * 2 + i, False, values, alpha, beta)
            max_eval = max(max_eval, eval_value)
            alpha = max(alpha, eval_value)
            if beta <= alpha:
                break  # C·∫Øt t·ªâa Beta (v√¨ MIN s·∫Ω kh√¥ng ch·ªçn nh√°nh n√†y)
        return max_eval
    else:
        min_eval = math.inf
        for i in range(2):
            eval_value = alpha_beta_pruning(depth + 1, node_index * 2 + i, True, values, alpha, beta)
            min_eval = min(min_eval, eval_value)
            beta = min(beta, eval_value)
            if beta <= alpha:
                break  # C·∫Øt t·ªâa Alpha (v√¨ MAX s·∫Ω kh√¥ng ch·ªçn nh√°nh n√†y)
        return min_eval

# Danh s√°ch gi√° tr·ªã t·∫°i c√°c n√∫t l√°
values = [3, 5, 6, 9, 1, 2, 0, -1]

# G·ªçi thu·∫≠t to√°n t·ª´ g·ªëc (ƒë·ªô s√¢u = 0, node_index = 0, MAX l√† ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n)
optimal_value = alpha_beta_pruning(0, 0, True, values, -math.inf, math.inf)

print(f"Gi√° tr·ªã t·ªëi ∆∞u m√† MAX c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c l√†: {optimal_value}")
