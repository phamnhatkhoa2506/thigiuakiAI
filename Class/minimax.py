'''
    --- M√¥ t·∫£ thu·∫≠t to√°n Minimax ---
    
    Minimax ho·∫°t ƒë·ªông theo nguy√™n t·∫Øc:
        - Ng∆∞·ªùi ch∆°i MAX (ch√∫ng ta) c·ªë g·∫Øng t·ªëi ƒëa h√≥a ƒëi·ªÉm s·ªë.
        - Ng∆∞·ªùi ch∆°i MIN (ƒë·ªëi th·ªß) c·ªë g·∫Øng t·ªëi thi·ªÉu h√≥a ƒëi·ªÉm s·ªë.
    C√¢y tr√≤ ch∆°i ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi c√°c n√∫t bi·ªÉu di·ªÖn tr·∫°ng th√°i c·ªßa tr√≤ ch∆°i, trong ƒë√≥:
        - N√∫t MAX: Ch·ªçn gi√° tr·ªã l·ªõn nh·∫•t t·ª´ c√°c n√∫t con.
        - N√∫t MIN: Ch·ªçn gi√° tr·ªã nh·ªè nh·∫•t t·ª´ c√°c n√∫t con.

    H√†m Minimax(n√∫t, ƒë·ªô s√¢u, isMax):
    N·∫øu n√∫t l√† tr·∫°ng th√°i k·∫øt th√∫c ho·∫∑c ƒë·ªô s√¢u = 0:
        Tr·∫£ v·ªÅ gi√° tr·ªã ƒë√°nh gi√° c·ªßa n√∫t
    
    N·∫øu isMax:
        Gi√° tr·ªã t·ªët nh·∫•t = -‚àû
        Duy·ªát qua t·∫•t c·∫£ n∆∞·ªõc ƒëi c√≥ th·ªÉ t·ª´ n√∫t hi·ªán t·∫°i:
            Gi√° tr·ªã t·ªët nh·∫•t = max(Gi√° tr·ªã t·ªët nh·∫•t, Minimax(n∆∞·ªõc ƒëi, ƒë·ªô s√¢u - 1, False))
        Tr·∫£ v·ªÅ Gi√° tr·ªã t·ªët nh·∫•t
    Ng∆∞·ª£c l·∫°i:  # ƒê·∫øn l∆∞·ª£t MIN
        Gi√° tr·ªã t·ªët nh·∫•t = +‚àû
        Duy·ªát qua t·∫•t c·∫£ n∆∞·ªõc ƒëi c√≥ th·ªÉ t·ª´ n√∫t hi·ªán t·∫°i:
            Gi√° tr·ªã t·ªët nh·∫•t = min(Gi√° tr·ªã t·ªët nh·∫•t, Minimax(n∆∞·ªõc ƒëi, ƒë·ªô s√¢u - 1, True))
        Tr·∫£ v·ªÅ Gi√° tr·ªã t·ªët nh·∫•t

    --- ·ª®ng d·ª•ng c·ªßa thu·∫≠t to√°n Minimax ---
    1. Tr√≤ ch∆°i tr√™n b·∫£ng (Board Games)

        Thu·∫≠t to√°n Minimax ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong c√°c tr√≤ ch∆°i c√≥ hai ng∆∞·ªùi ch∆°i v·ªõi t·ªïng ƒëi·ªÉm b·∫±ng 0 (zero-sum games), 
        ch·∫≥ng h·∫°n nh∆∞:
            - C·ªù vua (Chess)
            - C·ªù caro (Tic-tac-toe)
            - C·ªù v√¢y (Go)
            - C·ªù t∆∞·ªõng, c·ªù vua, c·ªù Othello...

        Trong c√°c tr√≤ ch∆°i n√†y:
            - Min ƒë·∫°i di·ªán cho ƒë·ªëi th·ªß (ng∆∞·ªùi mu·ªën gi·∫£m l·ª£i th·∫ø c·ªßa b·∫°n).
            - Max ƒë·∫°i di·ªán cho ng∆∞·ªùi ch∆°i ch√≠nh (ng∆∞·ªùi mu·ªën t·ªëi ƒëa h√≥a ƒëi·ªÉm s·ªë).
            - Thu·∫≠t to√°n duy·ªát qua c√¢y tr·∫°ng th√°i ƒë·ªÉ d·ª± ƒëo√°n n∆∞·ªõc ƒëi ti·∫øp theo v√† ch·ªçn n∆∞·ªõc ƒëi c√≥ l·ª£i nh·∫•t.

        üîπ V√≠ d·ª•: C·ªù caro (Tic-Tac-Toe)
        AI s·∫Ω xem x√©t m·ªçi n∆∞·ªõc ƒëi c√≥ th·ªÉ v√† ch·ªçn n∆∞·ªõc ƒëi gi√∫p n√≥ th·∫Øng ho·∫∑c tr√°nh thua.

    2. AI trong tr√≤ ch∆°i ƒëi·ªán t·ª≠ (Game AI)
        Minimax ƒë∆∞·ª£c ·ª©ng d·ª•ng ƒë·ªÉ thi·∫øt k·∫ø AI trong nhi·ªÅu tr√≤ ch∆°i ƒëi·ªán t·ª≠, ƒë·∫∑c bi·ªát l√† c√°c tr√≤ ch∆°i chi·∫øn 
        thu·∫≠t.
        - Game chi·∫øn thu·∫≠t theo l∆∞·ª£t (Turn-based strategy games) nh∆∞ Civilization, Fire Emblem.
        - Game ƒë√°nh c·ªù nh∆∞ Chess AI trong Stockfish, AlphaZero.

        Khi k·∫øt h·ª£p v·ªõi thu·∫≠t to√°n Alpha-Beta Pruning, hi·ªáu su·∫•t c·ªßa Minimax ƒë∆∞·ª£c c·∫£i thi·ªán ƒë√°ng k·ªÉ.

    3. Ra quy·∫øt ƒë·ªãnh trong kinh t·∫ø v√† t√†i ch√≠nh
        Trong c√°c t√¨nh hu·ªëng ƒë√†m ph√°n, kinh doanh, v√† th·ªã tr∆∞·ªùng t√†i ch√≠nh, Minimax c√≥ th·ªÉ gi√∫p d·ª± ƒëo√°n 
        h√†nh vi c·ªßa ƒë·ªëi th·ªß (c√¥ng ty c·∫°nh tranh).
        - Chi·∫øn l∆∞·ª£c gi√° c·∫£ gi·ªØa c√°c c√¥ng ty c·∫°nh tranh
        - Ph√¢n t√≠ch r·ªßi ro trong giao d·ªãch t√†i ch√≠nh
        - L·∫≠p k·∫ø ho·∫°ch ƒë·∫•u th·∫ßu trong c√°c cu·ªôc ƒë·∫•u gi√°

        V√≠ d·ª•: M·ªôt c√¥ng ty c√≥ th·ªÉ s·ª≠ d·ª•ng Minimax ƒë·ªÉ m√¥ ph·ªèng chi·∫øn l∆∞·ª£c c·ªßa ƒë·ªëi th·ªß khi ƒë·∫∑t gi√° s·∫£n ph·∫©m.

    4. L·∫≠p k·∫ø ho·∫°ch v√† ra quy·∫øt ƒë·ªãnh trong robot
        Minimax c√≥ th·ªÉ gi√∫p robot ra quy·∫øt ƒë·ªãnh t·ªëi ∆∞u khi th·ª±c hi·ªán nhi·ªám v·ª• trong m√¥i tr∆∞·ªùng kh√¥ng ch·∫Øc 
        ch·∫Øn.
        - Robot c√≥ th·ªÉ d√πng Minimax ƒë·ªÉ t√¨m chi·∫øn l∆∞·ª£c tr√°nh ch∆∞·ªõng ng·∫°i v·∫≠t.
        - ·ª®ng d·ª•ng trong xe t·ª± h√†nh (autonomous vehicles) khi ƒë·ªëi ph√≥ v·ªõi t√¨nh hu·ªëng giao th√¥ng ph·ª©c t·∫°p.
    
    5. B·∫£o m·∫≠t v√† m√£ h√≥a
        - Trong an ninh m·∫°ng, Minimax ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ m√¥ ph·ªèng chi·∫øn l∆∞·ª£c t·∫•n c√¥ng/ph√≤ng th·ªß gi·ªØa hacker v√† h·ªá th·ªëng b·∫£o m·∫≠t.
        - D√πng trong thi·∫øt k·∫ø thu·∫≠t to√°n ph√°t hi·ªán x√¢m nh·∫≠p ƒë·ªÉ t·ªëi ∆∞u h√≥a ph·∫£n ·ª©ng c·ªßa h·ªá th·ªëng b·∫£o m·∫≠t.

    6. X·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n (NLP)
        - Minimax c√≥ th·ªÉ d√πng trong chatbot ƒë√†m ph√°n ƒë·ªÉ ch·ªçn ph·∫£n h·ªìi h·ª£p l√Ω nh·∫•t khi th∆∞∆°ng l∆∞·ª£ng.
        - ·ª®ng d·ª•ng trong AI vi·∫øt vƒÉn b·∫£n ƒë·ªëi tho·∫°i, d·ª± ƒëo√°n c√¢u tr·∫£ l·ªùi c·ªßa ƒë·ªëi ph∆∞∆°ng. 

    --- K·∫øt lu·∫≠n --- 
    Thu·∫≠t to√°n Minimax c√≥ ·ª©ng d·ª•ng r·ªông r√£i trong tr√≠ tu·ªá nh√¢n t·∫°o, tr√≤ ch∆°i ƒëi·ªán t·ª≠, t√†i ch√≠nh, b·∫£o m·∫≠t, 
    robot v√† x·ª≠ l√Ω ng√¥n ng·ªØ. Khi k·∫øt h·ª£p v·ªõi Alpha-Beta Pruning, n√≥ tr·ªü th√†nh m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω gi√∫p ƒë∆∞a 
    ra quy·∫øt ƒë·ªãnh t·ªëi ∆∞u trong m√¥i tr∆∞·ªùng c√≥ hai b√™n ƒë·ªëi kh√°ng. üöÄ       
'''

import math

# H√†m minimax ƒë·ªá quy
def minimax(depth, node_index, is_maximizing, values, max_depth):
    # ƒêi·ªÅu ki·ªán d·ª´ng: N·∫øu ƒë·∫°t ƒë·∫øn n√∫t l√°
    if depth == max_depth:
        return values[node_index]

    if is_maximizing:
        best = -math.inf  # Gi√° tr·ªã l·ªõn nh·∫•t cho MAX
        # Duy·ªát qua 2 con c·ªßa n√∫t hi·ªán t·∫°i
        for i in range(2):
            val = minimax(depth + 1, node_index * 2 + i, False, values, max_depth)
            best = max(best, val)
        return best
    else:
        best = math.inf  # Gi√° tr·ªã nh·ªè nh·∫•t cho MIN
        # Duy·ªát qua 2 con c·ªßa n√∫t hi·ªán t·∫°i
        for i in range(2):
            val = minimax(depth + 1, node_index * 2 + i, True, values, max_depth)
            best = min(best, val)
        return best

# Danh s√°ch gi√° tr·ªã t·∫°i c√°c n√∫t l√°
values = [3, 5, 6, 9, 1, 2, 0, -1]

# S·ªë c·∫•p c·ªßa c√¢y (log2(s·ªë l∆∞·ª£ng n√∫t l√°))
max_depth = math.log2(len(values))

# G·ªçi thu·∫≠t to√°n t·ª´ g·ªëc (depth = 0, node_index = 0, MAX l√† ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n)
optimal_value = minimax(0, 0, True, values, max_depth)

print(f"Gi√° tr·ªã t·ªëi ∆∞u m√† MAX c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c l√†: {optimal_value}")
